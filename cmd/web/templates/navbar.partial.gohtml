{{define "navbar"}}
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">&nbsp;</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">                          
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">

          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/">Start</a>
          </li>
        
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">Administracja</a>
            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
              <li>
                <a class="dropdown-item" id="service-btn" role="button">                  
                  <input type="checkbox" id="service-info-checkbox">
                  Pokaż informacje z serwisu
                </a>
              </li>        
              {{if eq .IsAuthenticated 1}}
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="/admin/all-users">Użytkownicy</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="/logout">Wylogowanie</a></li>
              {{end}}
            </ul>
          </li>
        </ul>

        {{if eq .IsAuthenticated 1}}
          <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
            <li id="login-link" class="nav-item">
              <a class="nav-link" href="/logout">Wylogowanie</a></li>
            </li>
          </ul>
        {{else}}
          <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <a class="nav-link" href="/login">Logowanie</a></li>
            </li>
          </ul>
        {{end}}
      </div>
    </div>
  </nav>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4" crossorigin="anonymous"></script>
<script>

  {{if eq .IsAuthenticated 1}}
  let socket;
  
  document.addEventListener("DOMContentLoaded", function() {
    socket = new WebSocket("ws://localhost:4000/ws")

    socket.onopen = () => {
      console.log("Successfully connected to websockets");
    }

    socket.onclose = event => { };

    socket.onerror = error => { };

    socket.onmessage = msg => {
      let data = JSON.parse(msg.data);

      switch (data.action) {
        case "logout":
          if (data.user_id === {{.UserID}}) {
            logout();
          }
          break;
        default:
      }
    }

  })
  {{end}}

  function logout() {
    localStorage.removeItem("token");
    localStorage.removeItem("token_expiry");
    location.href = "/logout";
  }

  function checkAuth() {
    if (localStorage.getItem("token") === null) {
      location.href = "/login";
      return;
    } else {
      let token = localStorage.getItem("token");
      const myHeaders = new Headers();
      myHeaders.append("Content-Type", "application/json");
      myHeaders.append("Authorization", "Bearer " + token);

      const requestOptions = {
        method: "POST",
        headers: myHeaders,
      }

      fetch("{{.API}}/api/is-authenticated", requestOptions)
      .then(response => response.json())
      .then(function(data){
        if (data.error === true) {
          console.log("not logged in");
          location.href = "/login";
        } else {
          console.log("Logged in");
        }
      })
    }
  }
  </script>
  {{end}}